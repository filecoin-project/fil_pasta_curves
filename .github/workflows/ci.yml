name: CI checks

on: [push, pull_request]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # We don't need to test across multiple platforms yet
        # os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3
      - id: rust
        run: echo "toolchain=$(cat rust-toolchain)" >> $GITHUB_OUTPUT
        shell: bash
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust.outputs.toolchain }}
      - name: Run tests
        run: cargo test --verbose --release --all-features
        shell: bash

  build:
    name: Build target ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - wasm32-unknown-unknown
          - wasm32-wasi

    steps:
      - uses: actions/checkout@v3
      - id: rust
        run: echo "toolchain=$(cat rust-toolchain)" >> $GITHUB_OUTPUT
        shell: bash
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust.outputs.toolchain }}
      - name: Add target
        run: rustup target add ${{ matrix.target }}
      - name: cargo build
        run: cargo build --all-features
        shell: bash

  bitrot:
    name: Bitrot check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - id: rust
        run: echo "toolchain=$(cat rust-toolchain)" >> $GITHUB_OUTPUT
        shell: bash
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust.outputs.toolchain }}
      # Build benchmarks to prevent bitrot
      - name: Build benchmarks
        run: cargo build --benches --all-features
        shell: bash

  book:
    name: Book tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: rust
        run: echo "toolchain=$(cat rust-toolchain)" >> $GITHUB_OUTPUT
        shell: bash
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust.outputs.toolchain }}
      - name: cargo build
        run: cargo build
        shell: bash
      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: '0.4.5'
      - name: Test Pasta book
        run: mdbook test -L target/debug/deps book/

  clippy:
    name: Clippy (1.56.0)
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - id: rust
        run: echo "toolchain=$(cat rust-toolchain)" >> $GITHUB_OUTPUT
        shell: bash
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust.outputs.toolchain }}
          components: clippy
      - name: Run clippy
        run: cargo clippy --all-features --all-targets -- -D warnings
        shell: bash

  clippy-beta:
    name: Clippy (beta)
    timeout-minutes: 30
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@beta
        with:
          components: clippy
      - name: Run Clippy (beta)
        run: cargo clippy --all-features --all-targets -- -W clippy::all
        continue-on-error: true
        shell: bash

  codecov:
    name: Code coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      # Use stable for this to ensure that cargo-tarpaulin can be built.
      - uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
        shell: bash
      - name: Generate coverage report
        run: cargo tarpaulin --all-features --timeout 600 --out Xml
        shell: bash
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{secrets.CODECOV_TOKEN}}

  doc-links:
    name: Intra-doc links
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - id: rust
        run: echo "toolchain=$(cat rust-toolchain)" >> $GITHUB_OUTPUT
        shell: bash
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust.outputs.toolchain }}
      - name: cargo fetch
        run: cargo fetch
        shell: bash

      # Ensure intra-documentation links all resolve correctly
      # Requires #![deny(intra_doc_link_resolution_failure)] in crates.
      - name: Check intra-doc links
        run: cargo doc --document-private-items

  fmt:
    name: Rustfmt
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: rust
        run: echo "toolchain=$(cat rust-toolchain)" >> $GITHUB_OUTPUT
        shell: bash
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust.outputs.toolchain }}
      - run: rustup component add rustfmt
      - run: cargo fmt -- --check
        shell: bash

  no-std:
    name: Check no-std target ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - thumbv6m-none-eabi
          - wasm32-unknown-unknown
          - wasm32-wasi

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - run: rustup target add ${{ matrix.target }}
      - name: Build
        run: cargo build --verbose --target ${{ matrix.target }} --no-default-features
        shell: bash
